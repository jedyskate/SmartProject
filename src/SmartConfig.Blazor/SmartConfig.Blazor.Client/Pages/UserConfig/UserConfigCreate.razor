@page "/userconfig/create"
@using SmartConfig.BE.Sdk
@inject ISmartConfigApiClient SmartConfigApiClient
@inject NavigationManager NavigationManager

<PageTitle>Create User Config</PageTitle>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1 class="mb-0">Create User Config</h1>
</div>

<div class="card shadow-sm">
    <div class="card-body">
        <EditForm Model="_userConfig" OnValidSubmit="Save">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="row">
                <div class="col-md-6 mb-3">
                    <label for="identifier" class="form-label">Identifier</label>
                    <InputText id="identifier" class="form-control" @bind-Value="_userConfig.Identifier" />
                </div>
                <div class="col-md-6 mb-3">
                    <label for="name" class="form-label">Name</label>
                    <InputText id="name" class="form-control" @bind-Value="_userConfig.Name" />
                </div>
            </div>

            <div class="mb-3">
                <label for="language" class="form-label">Language</label>
                <InputText id="language" class="form-control" @bind-Value="_userConfig.UserPreferences.Language" />
            </div>

            <fieldset class="mb-3">
                <legend class="h6">Notifications</legend>
                <div class="form-check form-check-inline">
                    <InputCheckbox id="email" class="form-check-input" @bind-Value="_userConfig.UserPreferences.NotificationType.Email" />
                    <label for="email" class="form-check-label">Email</label>
                </div>
                <div class="form-check form-check-inline">
                    <InputCheckbox id="sms" class="form-check-input" @bind-Value="_userConfig.UserPreferences.NotificationType.Sms" />
                    <label for="sms" class="form-check-label">SMS</label>
                </div>
                <div class="form-check form-check-inline">
                    <InputCheckbox id="newsletter" class="form-check-input" @bind-Value="_userConfig.UserPreferences.UserNotifications.NewsLetter" />
                    <label for="newsletter" class="form-check-label">Newsletter</label>
                </div>
                <div class="form-check form-check-inline">
                    <InputCheckbox id="billings" class="form-check-input" @bind-Value="_userConfig.UserPreferences.UserNotifications.Billings" />
                    <label for="billings" class="form-check-label">Billings</label>
                </div>
            </fieldset>

            <h4 class="mt-4">User Settings</h4>
            @if (_userConfig.UserSettings != null)
            {
                foreach (var setting in _userConfig.UserSettings)
                {
                    <div class="row mb-2 align-items-center">
                        <div class="col">
                            <InputText class="form-control" @bind-Value="setting.Key" placeholder="Key" />
                        </div>
                        <div class="col">
                            <InputText class="form-control" @bind-Value="setting.Value" placeholder="Value" />
                        </div>
                        <div class="col-auto">
                            <button type="button" class="btn btn-danger btn-sm" @onclick="() => RemoveSetting(setting)">Remove</button>
                        </div>
                    </div>
                }
            }
            <button type="button" class="btn btn-secondary btn-sm mt-2" @onclick="AddSetting">Add User Setting</button>

            <div class="mt-4">
                <button type="submit" class="btn btn-primary" disabled="@_isSaving">
                    @if (_isSaving)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        <span>Saving...</span>
                    }
                    else
                    {
                        <span>Save</span>
                    }
                </button>
                <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private UpsertUserConfigCommand _userConfig = new()
    {
        UserPreferences = new UserPreferences
        {
            NotificationType = new NotificationType
            {
                Email = true,
                Sms = true
            },
            UserNotifications = new UserNotifications
            {
                Billings = true
            }
        },
        UserSettings = new List<UserSetting>(),
        Status = UserConfigStatus.Active,
        Options = new UpsertUserConfigOptions
        {
            UpsertPreferences = true,
            UpsertSettings = true
        }
    };
    private bool _isSaving = false;

    private void AddSetting()
    {
        _userConfig.UserSettings.Add(new UserSetting());
    }

    private void RemoveSetting(UserSetting setting)
    {
        _userConfig.UserSettings.Remove(setting);
    }

    private async Task Save()
    {
        _isSaving = true;
        await SmartConfigApiClient.UpsertUserConfigAsync(_userConfig);
        _isSaving = false;
        NavigationManager.NavigateTo("/userconfig/search");
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/userconfig/search");
    }
}
