#------------------------------------------------------------------------------
# Visual Studio / .NET / Blazor (BE, SDK, Test Projects)
#------------------------------------------------------------------------------
## Generic
*.log
*.vspscc
*.suo
*.user
*.userosscache
*.sln.docstates
*.pdb
*.opendb
*.tlog
*.trx

## Build Results
[Dd]ebug/
[Rr]elease/
[Bb]in/
[Oo]bj/
[Oo]ut/
build/
[Ll]og/
[Tt]emp/
[Tt]mp/
*.log

## Blazor Specific
wwwroot/
.blazor.js
.blazor.webassembly.js
.blazor.server.js
_framework/
_content/
# If you have client-side Blazor WASM and want to ignore the output directory
# For Blazor WASM, you might see a 'dist' or 'publish' folder within your client project's bin/Release/netX.Y/publish
# For Blazor Server, the output is typically within the standard bin/Release
# Consider if you have a separate Blazor Client project that compiles to a 'wwwroot' in your server project.
# Often, you *do* want to commit the Blazor-generated JS/CSS/DLLs to enable deployment without a full build server,
# but if you're deploying from source, you can ignore them.
# I'm leaning towards *not* ignoring wwwroot entirely, as it often contains static assets you *do* want.
# If you're building a WASM standalone app, you might want to ignore the 'dist' or 'publish' output
# bin/Release/**/publish/ # If you publish your Blazor WASM app to this directory.

## Visual Studio
.vs/
*.vsp
*.bsc
*.sbr
*.res
*.pch
*.lib
*.exp
*.ilk
*.idb
*.opt
*.ncb
*.msc
*.plg
*.aps
*.map
*.bak
*.old
*.obj
*.ipch
_ReSharper*/
[Tt]humbs.db
*.cache
*.sdf
*.vssscc
*.bak
*.vssscc
*.vsdi
*.userprefs
*.VC.opendb

## NuGet
packages/
*.nupkg
*.nuget.cache
.nuget/
*.tmp
*.lock.json
project.lock.json
project.assets.json
.localhistory
.vs/
.vs/VSWorkspaceState.json
## If you use a packages folder at the solution root
# **/packages/

#------------------------------------------------------------------------------
# JavaScript / TypeScript / Node (React, Next.js, SDK)
#------------------------------------------------------------------------------
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnp/
.pnp.js
.eslintcache
.next/ # For Next.js build output
.history/
build/ # For React/JS build output (if not Next.js specific)
dist/ # Common JS/TS build output
out/ # Another common JS/TS build output
coverage/
*.tsbuildinfo
*.js.map
*.css.map
*.scss.map
*.sass.map
*.less.map
*.styl.map
.env
.env.development
.env.production
.env.local
.env.development.local
.env.test.local
.env.production.local
.DS_Store # macOS specific
Thumbs.db # Windows specific
*.log
*.pid
*.seed
*.pid.lock
*.npmrc
.next/cache/
.parcel-cache/
.vite/
.output/ # Nuxt.js output, but good to include generally
storybook-static/

# IDE specific for JS/TS
.vscode/ # Only if you want to ignore user settings. Typically you'd commit launch.json, tasks.json, etc.
         # If you want to ignore workspace specific settings, you can add:
         # .vscode/*.json
         # .vscode/*.code-workspace
         # .vscode/settings.json
         # .vscode/tasks.json
         # .vscode/launch.json
# If you're using VS Code for .NET and JS, it's better to manage this carefully.
# For simplicity, I'm including a general .vscode/ ignore. Remove if you commit VS Code configs.
.idea/ # Added: For WebStorm/IntelliJ IDE files

#------------------------------------------------------------------------------
# Test Projects Specific
#------------------------------------------------------------------------------
# Test result files
TestResults/
*.coverage
*.coveragexml
*.vsmdas
*.trx

# Auto-generated test files
*.testsettings
*.runsettings

# Playwright specific (if used for FE tests)
test-results/
playwright-report/
html-report/

# Cypress specific (if used for FE tests)
cypress/videos/
cypress/screenshots/

#------------------------------------------------------------------------------
# Miscellaneous
#------------------------------------------------------------------------------
# OSX
.DS_Store
.AppleDouble
.LSOverride

# Linux
*.swp
*.bak
*.log
*.orig

# Windows
[Tt]humbs.db
[Dd]esktop.ini
$RECYCLE.BIN/

# Editor config files
.editorconfig

# Secret files
*.env
*.pem
*.key
*.cert

# Terraform (if you have infrastructure as code)
.terraform/
*.tfplan
*.tfstate
*.tfstate.backup

# Containerization (Docker)
.dockerignore
*.dockerfile
!Dockerfile # Don't ignore the actual Dockerfile

# Git specific
.git/
.gitignore
.gitmodules
.gitattributes
.gitkeep

# Package Manager Specific (e.g. pnpm, yarn workspaces)
# If using monorepo tools, adjust these:
# .pnpm-store/
# yarn-offline-mirror/
# .yarn/cache/
# .yarn/unplugged/
# .yarnrc.yml

#------------------------------------------------------------------------------
# Customizations - Add your project-specific ignores here
#------------------------------------------------------------------------------
# Example:
# /my-specific-be-project/bin/
# /my-specific-fe-project/dist/
# /my-sdk-project/obj/